/* Copyright (C) 2020 Nemirtingas
   This file is part of the Nemirtingas's Epic Emulator

   The Nemirtingas's Epic Emulator is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 3 of the License, or (at your option) any later version.

   The Nemirtingas's Epic Emulator is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the Nemirtingas's Epic Emulator; if not, see
   <http://www.gnu.org/licenses/>.  */

syntax = "proto3";

option optimize_for = LITE_RUNTIME;

//////////////////////////////////////////////////////////////////////////
//                          Presence messages                           //
//////////////////////////////////////////////////////////////////////////
// Request peer presence info
message Presence_Info_Request_pb {

}

// Response to peer presence info request
message Presence_Info_pb {
    string userid = 1;
    int32  status = 2;
    string productid = 3;
    string productversion = 4;
    string platform = 5;
    string richtext = 6;
    map<string, string> records = 7;
    string productname = 8;
}

// Base Presence related message
message Presence_Message_pb {
    oneof message {
        Presence_Info_Request_pb  presence_info_request = 1;
        Presence_Info_pb presence_info = 2;
	}
}

//////////////////////////////////////////////////////////////////////////
//                         UserInfo messages                            //
//////////////////////////////////////////////////////////////////////////
// Request peer userinfo
message UserInfo_Info_Request_pb {

}

// Response to peer userinfo request
message UserInfo_Info_pb {
	string country = 1;
	string displayname = 2;
	string preferredlanguage = 3;
	string nickname = 4;
}

// Base Friends related message
message UserInfo_Message_pb {
    oneof message {
        UserInfo_Info_Request_pb userinfo_info_request = 1;
        UserInfo_Info_pb userinfo_info = 2;
	}
}

//////////////////////////////////////////////////////////////////////////
//                         Sessions messages                            //
//////////////////////////////////////////////////////////////////////////
// Request peer sessions info
message Session_Infos_Request_pb {
    string session_id = 1;
}

message Session_Attr_Value {
    oneof value {
        int64  i = 1;
		double d = 2;
		bool   b = 3;
		string s = 4;
	}
}

message Session_Attribute {
    int32 advertisement_type = 1;
    Session_Attr_Value value = 2;
}

// Response to peer sessions infos request
message Session_Infos_pb {
    string session_id = 1;
	string bucket_id = 2;
	uint32 max_players = 3;
    repeated string players = 4;
    repeated string registered_players = 5;
    bool presence_allowed = 6;
    string host_address = 7;
    int32 permission_level = 8;
    bool join_in_progress_allowed = 9;
    bool invites_allowed = 10;
    map<string, Session_Attribute> attributes = 11;
    int32 state = 12;
}

// Message sent to all members when the session is destroyed
message Session_Destroy_pb {
    string session_id = 1;
}

// Request a session join
message Session_Join_Request_pb {
    string session_id = 1;
}

// Response to a session join
message Session_Join_Response_pb {
    string session_id = 1;
    string user_id = 2;
    int32 reason = 3;
}

// Session invite request
message Session_Invite_pb {
    Session_Infos_pb infos = 1;
}

message Session_Invite_Response_pb {
    string session_id = 1;
    bool accepted = 2;
}

message Session_Register_pb {
    string session_id = 1;
    repeated string member_ids = 2;
}

message Session_Unregister_pb {
    string session_id = 1;
    repeated string member_ids = 2;
}

// Base Sessions related message
message Session_Message_pb {
    oneof message {
        Session_Infos_Request_pb sessions_request = 1;
        Session_Infos_pb session_infos = 2;
        Session_Destroy_pb session_destroy = 3;
        Session_Join_Request_pb session_join_request = 4;
        Session_Join_Response_pb session_join_response = 5;
        Session_Invite_pb session_invite = 6;
        Session_Invite_Response_pb session_invite_response = 7;
        Session_Register_pb session_register = 8;
        Session_Unregister_pb session_unregister = 9;
	}
}

//////////////////////////////////////////////////////////////////////////
//                      Sessions Search messages                        //
//////////////////////////////////////////////////////////////////////////
message Session_Search_Parameter {
    map<int32, Session_Attr_Value> param = 1;
}

// Search sessions
message Sessions_Search_pb {
    uint64 search_id = 1;
    string session_id = 2;
    string target_id = 3;
    map<string, Session_Search_Parameter> parameters = 4;
    uint32 max_results = 5;
}

// Search Response
message Sessions_Search_response_pb {
    uint64 search_id = 1;
    repeated Session_Infos_pb sessions = 2;
}

message Sessions_Search_Message_pb {
    oneof message {
        Sessions_Search_pb search = 1;
        Sessions_Search_response_pb search_response = 2;
    }
}

//////////////////////////////////////////////////////////////////////////
//                            P2P messages                              //
//////////////////////////////////////////////////////////////////////////
// Request a P2P connection
message P2P_Connect_Request_pb {
    string socket_name = 1;
}

// Response to a P2P connection
message P2P_Connect_Response_pb {
    bool accepted = 1;
}

// Send P2P data
message P2P_Data_Message_pb {
    bytes data = 1;
    int32 channel = 2;
    string socket_name = 3;
    string user_id = 4;
}

// P2P data acknowledge
message P2P_Data_Acknowledge_pb {
    int32 channel = 1;
    bool accepted = 2;
}

// P2P Connection close
message P2P_Connection_Close_pb {
}

// Base P2P related message
message P2P_Message_pb {
    oneof message {
        P2P_Connect_Request_pb connect_request = 1;
        P2P_Connect_Response_pb connect_response = 2;
        P2P_Data_Message_pb data_message = 3;
        P2P_Data_Acknowledge_pb data_acknowledge = 4;
        P2P_Connection_Close_pb connection_close = 5;
	}
}

//////////////////////////////////////////////////////////////////////////
//                           Lobby messages                             //
//////////////////////////////////////////////////////////////////////////
message Lobby_Attr_Value {
    oneof value {
        int64  i = 1;
		double d = 2;
		bool   b = 3;
		string s = 4;
	}
}

message Lobby_Attribute {
    int32 visibility_type = 1;
    Lobby_Attr_Value value = 2;
}

message Lobby_Member_Infos_pb {
    map<string, Lobby_Attribute> attributes = 1;
}

message Lobby_Infos_pb {
    string lobby_id = 1;
    uint32 max_lobby_member = 2;
    int32 permission_level = 3;
    map<string, Lobby_Attribute> attributes = 4;
    string owner_id = 5;
    map<string, Lobby_Member_Infos_pb> members = 6;
}

message Lobby_Update_pb {
    string lobby_id = 1;
    uint32 max_lobby_member = 2;
    int32 permission_level = 3;
    map<string, Lobby_Attribute> attributes = 4;
}

message Lobby_Member_Update_pb {
    string lobby_id = 1;
    map<string, Lobby_Member_Infos_pb> member = 2;
}

message Lobby_Join_Request_pb {
    string lobby_id = 1;
    int32 join_id = 2;
}

message Lobby_Join_Response_pb {
    Lobby_Infos_pb infos = 1;
    int32 reason = 2;
    int32 join_id = 3;
}

message Lobby_Invite_pb {
    Lobby_Infos_pb infos = 1;
}

message Lobby_Member_Join_pb {
    string lobby_id = 1;
    string member_id = 2;
}

message Lobby_Member_Leave_pb {
    string lobby_id = 1;
    string member_id = 2;
    int32 reason = 3;
}

message Lobby_Member_Promote_pb {
    string lobby_id = 1;
    string member_id = 2;
}

// Base Lobby related message
message Lobby_Message_pb {
    oneof message {
        Lobby_Update_pb        lobby_update = 1;
        Lobby_Join_Request_pb  lobby_join_request = 2;
        Lobby_Join_Response_pb lobby_join_response = 3;
        Lobby_Invite_pb        lobby_invite = 4;

        Lobby_Member_Update_pb  member_update = 5;
        Lobby_Member_Join_pb    member_join = 6;
        Lobby_Member_Leave_pb   member_leave = 7;
        Lobby_Member_Promote_pb member_promote = 8;
	}
}

//////////////////////////////////////////////////////////////////////////
//                       Lobbies Search messages                        //
//////////////////////////////////////////////////////////////////////////
// Search parameter, key is the comparison type
message Lobby_Search_Parameter {
    map<int32, Lobby_Attr_Value> param = 1;
}

// Search sessions
message Lobbies_Search_pb {
    uint64 search_id = 1;
    string lobby_id = 2;
    string target_id = 3;
    map<string, Lobby_Search_Parameter> parameters = 4;
    uint32 max_results = 5;
}

// Search Response
message Lobbies_Search_response_pb {
    uint64 search_id = 1;
    repeated Lobby_Infos_pb lobbies = 2;
}

// Base Lobbies Search related message
message Lobbies_Search_Message_pb {
    oneof message {
        Lobbies_Search_pb search = 1;
        Lobbies_Search_response_pb search_response = 2;
    }
}

//////////////////////////////////////////////////////////////////////////
//                          Friends messages                            //
//////////////////////////////////////////////////////////////////////////
// Request peer friend infos
//message Friend_Info_Request_pb {
//}
//
// Response to peer friend infos request
//message Friend_Info_pb {
//}
//
// Base Friends related message
//message Friends_Message_pb {
//    oneof message {
//        Friend_Info_Request_pb friend_info_request = 1;
//        Friend_Info_pb friend_info = 2;
//	}
//}

//////////////////////////////////////////////////////////////////////////
//                          Connect messages                            //
//////////////////////////////////////////////////////////////////////////
message Connect_Request_Info_pb {

}

message Connect_Infos_pb {
    string userid = 1;
    map<string, string> sessions = 2;
    string displayname = 3;
}

// Base Connect related message
message Connect_Message_pb {
    oneof message {
        Connect_Request_Info_pb request = 1;
        Connect_Infos_pb infos = 2;
	}
}
//////////////////////////////////////////////////////////////////////////
//                          Network messages                            //
//////////////////////////////////////////////////////////////////////////
message Network_Port_pb {
    uint32 port = 1;
}

message Network_Peer_pb {
    repeated string peer_ids = 1;
}

message Network_Peer_Accept_pb {
}

message Network_Peer_Connect_pb {
}

message Network_Peer_Disconnect_pb {
}

message Network_Advertise_pb {
    oneof message {
        Network_Port_pb port = 1;
        Network_Peer_pb peer = 2;
        Network_Peer_Accept_pb accept = 3;
        Network_Peer_Connect_pb peer_connect = 4;
		Network_Peer_Disconnect_pb peer_disconnect = 5;
	}
}

// Network base message
message Network_Message_pb {
    string source_id = 1;
    string dest_id = 2;
	string game_id = 3;
    int64 timestamp = 4;
    oneof messages {
        Network_Advertise_pb network_advertise = 5;
		//Friends_Message_pb friends = 6;
        Presence_Message_pb presence = 7;
        UserInfo_Message_pb userinfo = 8;
        Session_Message_pb session = 9;
        P2P_Message_pb p2p = 10;
        Connect_Message_pb connect = 11;
        Sessions_Search_Message_pb sessions_search = 12;
        Lobby_Message_pb lobby = 13;
        Lobbies_Search_Message_pb lobbies_search = 14;
    }
}
