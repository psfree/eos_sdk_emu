stages:
  - dependencies
  - build
  - sign
  - deploy
  - pages

variables:
  DOCKER_DRIVER: overlay2
  GIT_SUBMODULE_STRATEGY: recursive

static:linux:deps:
  stage: dependencies
  image: nemirtingas/linux_vcpkg:ubuntu18

  script:
    - VCPKG_PATH=$(pwd)/vcpkg
    - TRIPLET=x64-linux-release
    - vcpkg "--x-install-root=${VCPKG_PATH}" install protobuf:${TRIPLET} || exit 1
    #- vcpkg "--x-install-root=${VCPKG_PATH}" install protobuf[zlib]:${TRIPLET} || exit 1
    #- vcpkg "--x-install-root=${VCPKG_PATH}" install curl:${TRIPLET} || exit 1
    #- vcpkg "--x-install-root=${VCPKG_PATH}" install glew:${TRIPLET} || exit 1
    - vcpkg "--x-install-root=${VCPKG_PATH}" install zstd:${TRIPLET} || exit 1
    - exit 0

  cache:
    key: static-linux-deps-cache
    paths:
      - vcpkg
  artifacts:
    paths:
      - vcpkg
    expire_in: 1 day

static:windows:deps:
  stage: dependencies
  image: nemirtingas/windowscross_vcpkg:msvc2019

  script:
    - VCPKG_PATH=$(pwd)/vcpkg
    - TRIPLET=x64-linux
    - vcpkg "--x-install-root=${VCPKG_PATH}" install protobuf:${TRIPLET} || exit 1
    - TRIPLET=x86-windows-release
    - vcpkg "--x-install-root=${VCPKG_PATH}" install protobuf:${TRIPLET} || exit 1
    #- vcpkg "--x-install-root=${VCPKG_PATH}" install protobuf[zlib]:${TRIPLET} || exit 1
    #- vcpkg "--x-install-root=${VCPKG_PATH}" install curl:${TRIPLET} || exit 1
    #- vcpkg "--x-install-root=${VCPKG_PATH}" install glew:${TRIPLET} || exit 1
    - vcpkg "--x-install-root=${VCPKG_PATH}" install zstd:${TRIPLET} || exit 1
    - TRIPLET=x64-windows-release
    - vcpkg "--x-install-root=${VCPKG_PATH}" install protobuf:${TRIPLET} || exit 1
    #- vcpkg "--x-install-root=${VCPKG_PATH}" install protobuf[zlib]:${TRIPLET} || exit 1
    #- vcpkg "--x-install-root=${VCPKG_PATH}" install curl:${TRIPLET} || exit 1
    #- vcpkg "--x-install-root=${VCPKG_PATH}" install glew:${TRIPLET} || exit 1
    - vcpkg "--x-install-root=${VCPKG_PATH}" install zstd:${TRIPLET} || exit 1
    - exit 0

  cache:
    key: static-windows-deps-cache
    paths:
      - vcpkg
  artifacts:
    paths:
      - vcpkg
    expire_in: 1 day

static:macosx:deps:
  stage: dependencies
  image: nemirtingas/osxcross_vcpkg:SDK10.13

  script:
    - VCPKG_PATH=$(pwd)/vcpkg
    - TRIPLET=x64-linux
    - vcpkg "--x-install-root=${VCPKG_PATH}" install protobuf:${TRIPLET} || exit 1
    - TRIPLET=x64-darwin-release
    - vcpkg "--x-install-root=${VCPKG_PATH}" install protobuf:${TRIPLET} || exit 1
    #- vcpkg "--x-install-root=${VCPKG_PATH}" install protobuf[zlib]:${TRIPLET} || exit 1
    #- vcpkg "--x-install-root=${VCPKG_PATH}" install curl:${TRIPLET} || exit 1
    - vcpkg "--x-install-root=${VCPKG_PATH}" install zstd:${TRIPLET} || exit 1
    - exit 0

  cache:
    key: static-macosx-deps-cache
    paths:
      - vcpkg/
  artifacts:
    paths:
      - vcpkg/
    expire_in: 1 day

build:linux:
  stage: build
  image: nemirtingas/linux_vcpkg:ubuntu18
  dependencies:
    - static:linux:deps

  script:
    - ./ci_versionning.sh
    - VCPKG_PATH=$(pwd)/vcpkg
    - export TRIPLET=x64-linux-release
    - OUT=linux64/Release
    - cmake -G Ninja -Wno-dev "-D_VCPKG_INSTALLED_DIR=${VCPKG_PATH}" -DX64=ON -DCMAKE_BUILD_TYPE=Release -S . -B "${OUT}"
    - cmake --build "${OUT}"
    - cmake --install "${OUT}"
    - exit 0

  artifacts:
    paths:
      - release/
      - debug/
    expire_in: 1 day

build:windows:
  stage: build
  image: nemirtingas/windowscross_vcpkg:msvc2019
  dependencies:
    - static:windows:deps

  script:
    - ./ci_versionning.sh
    - VCPKG_PATH=$(pwd)/vcpkg
    - export TRIPLET=x86-windows-release
    - OUT=win32/Release
    - cmake -G Ninja -Wno-dev "-D_VCPKG_INSTALLED_DIR=${VCPKG_PATH}" -DX86=ON -DCMAKE_BUILD_TYPE=Release -S . -B "${OUT}"
    - cmake --build "${OUT}"
    - cmake --install "${OUT}"
    - export TRIPLET=x64-windows-release
    - OUT=win64/Release
    - cmake -G Ninja -Wno-dev "-D_VCPKG_INSTALLED_DIR=${VCPKG_PATH}" -DX64=ON -DCMAKE_BUILD_TYPE=Release -S . -B "${OUT}"
    - cmake --build "${OUT}"
    - cmake --install "${OUT}"
  artifacts:
    paths:
      - release/
      - debug/
    expire_in: 1 day

build:macosx:
  stage: build
  image: nemirtingas/osxcross_vcpkg:SDK10.13
  dependencies:
    - static:macosx:deps

  script:
    - ./ci_versionning.sh
    - VCPKG_PATH=$(pwd)/vcpkg
    - export TRIPLET=x64-darwin-release
    - OUT=macosx64/Release
    - cmake -G Ninja -Wno-dev "-D_VCPKG_INSTALLED_DIR=${VCPKG_PATH}" -DX64=ON -DCMAKE_BUILD_TYPE=Release -S . -B "${OUT}"
    - cmake --build "${OUT}"
    - cmake --install "${OUT}"
    - mkdir release/macosx

  artifacts:
    paths:
      - release/
      - debug/
    expire_in: 1 day

build:launcher:
  stage: build
  image: mcr.microsoft.com/dotnet/core/sdk

  script:
    - cd NemirtingasEmuLauncher
    - dotnet publish -c Release
    - dotnet publish -c Release -r osx-x64 --self-contained=false
    - dotnet publish -c Release -r win-x64 --self-contained=false
    - mkdir ../release/
    - mv bin/Release/netcoreapp3.1/publish/NemirtingasEmuLauncher bin/Release/netcoreapp3.1/publish/NemirtingasEmuLauncher.linux
    - mv bin/Release/netcoreapp3.1/win-x64/publish/NemirtingasEmuLauncher.exe ../release/NemirtingasEmuLauncher.exe
    - mv bin/Release/netcoreapp3.1/osx-x64/publish/NemirtingasEmuLauncher ../release/NemirtingasEmuLauncher.macos
    - mv bin/Release/netcoreapp3.1/publish/* ../release/
    - exit 0

  artifacts:
    paths:
      - release
    expire_in: 1 day

sign:
  image: alpine:3.4
  stage: sign
  dependencies:
    - build:windows
    - build:linux
    - build:macosx
    - build:launcher
    
  script:
    - apk update && apk add libcurl curl-dev openssl-dev autoconf build-base automake libtool git openssl
    - git clone https://github.com/dmcgowan/osslsigncode
    - cd osslsigncode
    - ./autogen.sh && ./configure && make && make install && make clean || exit 1
    - cd ..
    - C="US"
    - O="Epic Games Inc."
    - L="Bellevue"
    - ST="WA"
    - SUBJECT="/C=$C/O=$O/L=$L/ST=$ST"
    - KEY="cert.key"
    - CERT="cert.pem"
    - DAYS="365"
    - ALGO="sha256"
    - BITS="2048"
    - PASSW=azerty
    - openssl req -x509 -"$ALGO" -passin "pass:$PASSW" -passout "pass:$PASSW" -newkey rsa:"$BITS" -subj "$SUBJECT" -keyout "$KEY" -out "$CERT" -days "$DAYS"
    - osslsigncode sign -certs "$CERT" -h "$ALGO" -key "$KEY" -pass "$PASSW" -in release/win32/EOSSDK-Win32-Shipping.dll -out EOSSDK-Win32-Shipping.dll
    - mv EOSSDK-Win32-Shipping.dll release/win32/
    - osslsigncode sign -certs "$CERT" -h "$ALGO" -key "$KEY" -pass "$PASSW" -in release/win64/EOSSDK-Win64-Shipping.dll -out EOSSDK-Win64-Shipping.dll
    - mv EOSSDK-Win64-Shipping.dll release/win64/

  artifacts:
    paths:
      - release/
      - debug/
  only:
    - master

deploy:
  image: alpine
  stage: deploy
  dependencies:
    - sign
  script:
    - echo $CI_JOB_ID > job_id
    
  artifacts:
    paths:
      - release/
      - debug/
      - job_id
  only:
    - master

pages:
  image: alpine
  stage: pages
  dependencies:
    - deploy
  script:
    - DEPLOY_ALL_JOBID=$(cat job_id)
    - sed -i "s|X_LATEST_BUILD_URL_X|https://gitlab.com/Nemirtingas/nemirtingas_epic_emu/-/jobs/$DEPLOY_ALL_JOBID/artifacts/download|g" public/index.html
    - sed -i "s|X_LATEST_BUILD_COMMIT_HASH_X|$CI_COMMIT_SHA|g" public/index.html

  artifacts:
    paths:
      - public/
  only:
    - master

